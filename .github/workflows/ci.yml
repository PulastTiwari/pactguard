name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  frontend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npx tsc --noEmit

      - name: Build frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8001

  backend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install backend dependencies
        run: |
          cd api
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python linting
        run: |
          cd api
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test backend startup
        run: |
          cd api
          timeout 30s python -c "
          import uvicorn
          import sys
          import os
          sys.path.append('.')

          # Set mock environment variables
          os.environ['PORTIA_API_KEY'] = 'test_key'
          os.environ['GOOGLE_AI_API_KEY'] = 'test_key'

          try:
              from main_portia import app
              print('✅ Backend imports successfully')
          except Exception as e:
              print(f'❌ Backend import failed: {e}')
              sys.exit(1)
          " || true

  docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Test Docker build
        run: |
          # Test if Docker builds complete successfully
          echo "PORTIA_API_KEY=test_key" > .env
          echo "GOOGLE_API_KEY=test_key" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PYTHONPATH=/app" >> .env

          # Build frontend Docker image
          docker build -f Dockerfile.frontend -t pactguard-frontend .

          # Build backend Docker image
          docker build -f Dockerfile.backend -t pactguard-backend .
