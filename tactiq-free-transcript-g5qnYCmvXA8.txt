# tactiq.io free youtube transcript
# No title found
# https://www.youtube.com/watch/g5qnYCmvXA8

00:00:00.720 Hello and welcome to this tutorial.
00:00:04.560 We are, in this tutorial, going to go  over the basic concepts of Portia AI,
00:00:10.720 but this time we're going to  get hands-on, so we're going to
00:00:13.920 illustrate the concepts as we code along.  It's going to be a pretty simple example we
00:00:18.720 walk through – by the end of it you will  have both some news headlines from file,
00:00:23.680 extracted some information from it, and sent  an email on. But the idea is to get you through
00:00:29.200 all of the core concepts. If you've been following  from the previous videos we did a more conceptual
00:00:35.280 overview. If you're the kind of person who  likes to get the hands-on then you would have
00:00:40.160 jumped straight into this – but don't worry I  will recap all of the concepts as we go along.
00:00:46.080 So, I'm starting off from a blank project  let's just do the very exciting task of
00:00:51.760 getting the project set up first, and  so the first thing we are going to do is
00:00:58.640 pull up the terminal and I'm using poetry to  initialize my project here. So I'm just going to
00:01:06.720 initialize the project uh go, yes, whatever ... and no and "would you like to find
00:01:19.520 interactively?" no just go and figure that out  for me ,continue generation, yes, right, so.
00:01:24.320 Now that my toml file is selected you  see here it says requires Python 3.11,
00:01:31.120 which means that if I try and install the  Portia SDK I am going to get a message
00:01:38.960 that says that it's not sure it's got the  right Python version. So what I need to
00:01:44.400 do here is – you may not need to deal with  that if you're using UV or something else,
00:01:48.480 I'm just sort of a creature of habit – so I'm  using VS Code and using Poetry both of which I
00:01:54.800 should probably change to catch up with the  rest of my team but let's just keep going.
00:01:59.520 So I have now added the Portia SDK. The  last thing I need to do because VS Code
00:02:08.320 is not the best is to make sure that  I have the right Python interpreter,
00:02:14.480 so that when I create my main and try  to run it, it's using the right version
00:02:21.120 corresponding to the one that's  in the poetry environment.
00:02:24.560 So I'm just going to go like this and pick  out specifically the executable that the
00:02:32.000 virtual environment wants to use which I  can then make sure that I pull up in the
00:02:41.120 thing. So let's create our main, there we  go, and now I'm just going to go straight
00:02:48.480 here enter interpreter path – BOOM! All right.  So now we are ready to write some code. Before
00:02:55.840 I do that I'm also going to create a .env file.  This is because we use the .env file to pull all
00:03:02.880 of the potentially relevant API keys and before  you get started you are going to need an API key
00:03:10.800 for one of the known LLMs. We should probably  start talking about what the product does!
00:03:16.320 Portia allows you to build predictable,  controllable, and authenticated AI agents in
00:03:23.360 production. You can point it to any LLM you like  – we are LLM agnostic. So obviously you need to
00:03:28.640 supply the API key for said LLM. So let's just go  ahead and do that. I'm going to quickly pop in and
00:03:39.440 get the API keys that I need – now I have to warn  you this is not a jackpot, because this API key
00:03:47.360 will probably have expired by the time you watch  this video so I wouldn't try and use it, you're
00:03:51.760 not going to get much joy out of that. Anyways,  so you put up your API key and now we can actually
00:03:58.320 start coding so the first thing. I'm going to do  a super basic example where I'm going to pull some
00:04:09.040 information for some news headlines, and there's  a particular piece of news that I'm after.
00:04:13.600 So, I'm going to add the file  the text file that I want to
00:04:18.079 get the news headlines from these are  some pretty epic KVWN Channel 4 News
00:04:24.880 headlines that some of you might be familiar  with. The human torch was denied a bank loan;
00:04:30.720 the skeleton ran out of shampoo in the shower;  and the arsonist had oddly shaped feet!
00:04:35.920 So, now that we are equipped with these  compelling bits of news headlines,
00:04:40.320 let us try and pull that information out and  question it. So, there's a bunch of imports
00:04:45.920 that we need to get started. I usually always load  dotenv because we're going to use it eventually.
00:04:53.680 But let's start talking about more Portia  specific abstractions, so the first thing
00:04:59.280 I'm going to do I'm definitely typing this fast  and not copy-pasting from elsewhere – sarcasm.
00:05:06.000 We're setting up the config here. I'm just going  to use the default config, but in the config class
00:05:11.360 of Portia you can define a whole bunch of things.  If you just sort of look at the default config
00:05:17.040 itself you can pick out the LLM model name,  you can pick out the LLM provider as well.
00:05:23.200 You can pick out the storage class whether you  want to store in the cloud or not. In our case,
00:05:27.120 If you have a Portia API key stuff gets  stored into the Portia cloud by default,
00:05:32.240 and if not it gets stored in your sort of  runtime memory. You can make the storage
00:05:37.760 class point elsewhere – you can make it  point to disk, for example, and provide a
00:05:41.360 folder where you want things like your plan run  states and tool call logs to be saved over time,
00:05:47.120 and there's a few other more options in config  which we'll go over in a in a separate video.
00:05:52.720 So now I'm instantiating my Portia client  with this config. I'm also going to attach
00:05:58.720 a default tool registry to it. We're going to  see in a second that this is a dynamic tool
00:06:03.280 registry that either pulls a bunch of the  open-source tools that come with our SDK,
00:06:09.200 or if you have the Portia API key  also equips the Portia client with
00:06:14.960 all of our cloud tools. So now is a good time  to share that Portia has a cloud hosted tool
00:06:21.360 library. And you know since MCP is all the rage  I'm sure you're asking yourself this question:
00:06:27.600 You can absolutely load tools from any MCP  server and equip the Portia client with it so
00:06:35.920 that when it's doing its planning and execution  further down the line it can use those as well.
00:06:41.840 So let's keep going. So the next thing I want to  do is I want to give it a prompt and ask it to
00:06:47.760 generate a plan. So what I'm going to do here  is use the Portia.plan method and this method
00:06:56.640 takes a query and a list of tools if you wanted  to give it a list of tools – it's an optional
00:07:04.400 parameter. It'll otherwise use the sort of  supererset of tools provided to the Portia
00:07:08.960 client. You can also equip it with example  plans and what that means is if you wanted to
00:07:13.920 snap the thinking of our planning agent when  it's generating a plan to some good examples
00:07:22.080 you can sort of do that here. By the time this  video releases I'm pretty sure we will have
00:07:28.880 launched a feature that essentially allows you  to just upvote plans that you really like and
00:07:34.240 instead of you sort of statically providing  example plans you like they get picked out
00:07:39.200 based on query similarity – essentially a way for  you to say more of this please Mr planning agent.
00:07:46.800 Right so the Portia plan piece is going to invoke  the planning agent uh which is going to pick out
00:07:52.640 all the tools that it was given do some pondering  and produce a uh JSON formatted uh plan uh which
00:08:02.640 we're going to look at in just a second now the  other thing that I want to do while we're here is
00:08:09.040 um also run the the plan once it's generated  so I will want to go uh Portia.run run plan
00:08:16.000 which takes a plan as an input now you know if you  because we pride ourselves on this on this ability
00:08:23.840 uh to uh to be on the spectrum of autonomy that  you like you could for example choose to iterate
00:08:30.800 here on a plan run convers on a sorry a plan  designed conversationally with the planning
00:08:35.679 agent to get to a place where you're comfortable  with it uh and once you are you can sort of run
00:08:41.440 the plan which we'll talk about what that does  in a second and how it works uh and you know
00:08:46.400 if you have plans that you're confident with  and and just want to reuse uh or you just want
00:08:51.600 to jump straight into full autonomy type thing  you could have easily done uh Portia run which
00:08:58.560 sort of immediately takes the query um instead of  explicitly going through the step of creating the
00:09:04.480 plan first let's just stick with this one for now  let me just hear my terminal so it's e easier for
00:09:10.240 you to see what's going on and uh the thing that  I'm asking um Portia to help me with is pick up
00:09:17.840 the news headlines from this file confirm um you  know extract some information here you know if
00:09:24.000 you remember from the news headline that the the  skeleton ran out of shampoo in the shower uh we
00:09:29.440 want to confirm uh how the the skeleton's shower  went and uh and summarize with a personalized
00:09:34.960 message note here i'm sort of teasing it here  and saying I want this to be signed with my
00:09:39.920 name at the end obviously you can tell there's  nothing that says what my name is is here so
00:09:45.280 uh let's have a look at what that does and the  idea is to show you sort of how the LLM copes with
00:09:50.800 this sort of ambiguity and and in a second we'll  see how we address that so the first thing that
00:09:55.360 happens is the planning agent is going to run uh  for this query and uh it's going the first thing
00:10:01.760 it's going to do is is uh predictably produce  a plan and um and uh and we'll get an output of
00:10:07.520 that in a second i'm using input instead of print  just a small detail just so that it sort of stops
00:10:12.800 scrolling through uh the command line dumps and  we can have a look at the plan together so um open
00:10:20.560 AAI is being a little bit slow today um let's give  it a second and there we go so let's have a look
00:10:28.880 at what a plan is made of so obviously it has a  unique ID the plan context is the query that we
00:10:34.320 gave it and this is the list of tools loaded into  the default tool registry dynamically because I
00:10:40.800 don't have a Portia API key yet as you can see  called out here uh it only loaded the open source
00:10:46.320 tools that are in our SDK it's just a few tools  that we uh that we built we're continuing to add
00:10:51.520 to it um maybe just useful for you to get familiar  with the SDK now have a look at this so a plan is
00:10:59.200 a sequence of steps right and every step is a task  it takes a bunch of inputs that get extracted from
00:11:04.640 the query and get extracted from previous  steps and it gives you an output at the end
00:11:10.080 you will notice that the tools are being selected  dynamically and you will also notice that in sort
00:11:16.240 the following steps the set of inputs uh are  uh can be inputs from can be outputs from
00:11:23.040 previous steps or they could be um they could  be just information that was gleaned from the
00:11:29.760 uh the query right and so here the first thing  we're doing is extracting the news headlines
00:11:34.960 uh figuring out how the skeleton shower went  based on the news headlines and then writing that
00:11:40.640 personalized message and so you'll see it says LLM  tool that's just basically like a toolless agent
00:11:45.760 if you will that just uses LLM smarts to complete  a task so you never need to hardwire agents in our
00:11:53.280 case right you have a planning agent and then you  have archetypes of agents like an execution agent
00:11:58.640 and so when you run a plan Portia takes the that  plan and will spin up an execution agent for every
00:12:05.360 step in another video we'll talk a bit more about  the other types of agents that help the execution
00:12:12.160 agent like a there's an introspection agent  for example that makes decisions by assessing
00:12:17.600 conditions to figure out if you should even run a  step or not and that's how we handle conditionals
00:12:23.040 pretty cool stuff so so yeah let's h find out  how this skeleton shower went shall we now
00:12:30.880 next thing that's going to happen is we've  now moved on to running the plan right and
00:12:35.760 um and there you go so step zero was executed  which has fetched the uh information the headlines
00:12:42.160 including the fact that it's got to run out of  shampoo in the shower step one let's just wait for
00:12:46.960 this thing to calm down here we go one sec let's  have a look step one is what I wanted to show you
00:12:55.280 uh in that step after we invoked first and step  zero the file reader tool to get the information
00:13:01.600 step one was about analyzing that information um  and came out with the output that suggests that uh
00:13:10.320 um you know uh lots of brainy analysis i mean it  would be nice if you had a bit more sense of humor
00:13:16.880 here Mr lm uh but hey look it did conclude that  the uh the shower did not go as planned uh because
00:13:23.520 the skeleton encountered an unexpected situation  running out of shampoo so that's great and then it
00:13:29.840 finally wrote a personalized message uh using the  LLM tool as well um and notice how it signed this
00:13:36.240 with like oh best regards your name because it's  not equipped with a name right uh and the final
00:13:43.200 thing that gets produced which I certainly asked  it to do which is dump it dump the JSON here is
00:13:49.360 the final plan run state so every step here every  execution agent enriches the plan run state with
00:13:56.400 its outputs and so what you get at the end is this  final plan run state which has gotten to the final
00:14:02.400 step uh steps are indexed from zero onward so  since it's three steps at step two um the state
00:14:09.040 is complete and you see some interesting stuff  here so these are all the outputs from the various
00:14:14.560 steps that are contained in variables uh and you  have a summarization tasks that happens here as
00:14:20.720 well just sort of about its findings and a final  output and this final output is um well as we as
00:14:27.200 we saw it earlier that the the the shower did not  go as planned for our bony friend so happy days
00:14:34.000 at this stage we've we now understand what a plan  is what a plan run is how the plan run state is
00:14:39.440 maintained and enriched by the execution agent um  let's uh let's stretch this a little bit more uh
00:14:46.960 what I would like to do is start um involving uh  the concept of an end user when you're deploying
00:14:54.640 in production you're going to have individual end  users running multi- aent uh tasks uh you'll want
00:15:01.440 to be able to differentiate them you'll want to be  able to load information specific to each end user
00:15:06.560 in production so that that gets captured into the  the the runtime and the way you do that is you use
00:15:13.760 what we call the execution context um so I'm going  to go ahead and import the execution context here
00:15:24.880 um and the the way you use execution context we're  we're working on this abstraction we don't quite
00:15:31.200 like the way it looks today so bear with us but uh  this should be illustrative enough of how it works
00:15:37.440 um the thing that you do is that you provide a  with execution context where you get to define the
00:15:45.680 uh the end user so for example here let's just  call this Momo's that's me uh YouTube demo and
00:15:54.080 uh I am co-founder uh at Portia AI um and so  now this information is going to get fed and
00:16:02.480 you can this is key value pairs by the way  you can add a whole bunch of stuff here that
00:16:06.560 is going to get fed to the planning agent and  the execution agents as they are going through
00:16:11.280 uh this process and so not only is this useful for  enriching context which you'd hope gets picked up
00:16:17.440 when signing the name for example it's also going  to be useful when you start doing things that
00:16:22.240 involve OOTH tokens and you're collecting OOTH  tokens so that you can tell which token is for
00:16:27.360 which end user on your end so the other thing I  want to do is I I kind of want to stretch this a
00:16:34.720 little bit more and I want to say uh I don't want  you to just sort of get information and write me
00:16:39.840 a message here i actually want you to send an  email and the way I do that is I'm just going
00:16:45.360 to change the prompt a little bit so by now you  figured that I'm copying from another screen so
00:16:51.040 that I save you watching me typing awkwardly  um yeah so like there's really that final step
00:16:56.880 where I'm saying summarize and send an email  to hello@porlabs.ai sign with my name at the
00:17:01.680 end now the only thing that's still missing here  is the u the tool that it's going to need to send
00:17:08.480 an email is obviously not in our open source SDK  we have it in our online tool catalog uh our cloud
00:17:15.359 tool catalog so I need to add a Portia API key  uh and you'll see the change that that does to
00:17:20.800 the default tool registry so I'm just going to go  ahead here uh and uh copy the Portia API key um
00:17:31.200 again don't get too excited because this is not  a key that you can use um all right you go away
00:17:39.040 yep all right so now that I've created the Portia  or added the Portia API key it's the default tool
00:17:44.560 registry is going to be larger because it's going  to pick stuff from our cloud catalog uh let's run
00:17:50.000 this thing and see what happens in the current  state of things u spoiler alert it's not going to
00:17:55.520 run and you'll see why in a second um let's clear  our terminal and do this one more time and let's
00:18:03.200 see what happens so first thing you expect of  course planning agent is going to run um and the
00:18:09.760 first thing you're going to notice is our default  tool registry is now going to be much bigger it's
00:18:13.840 going to take everything we have in our uh Portia  cloud catalog since there's a Portia API key but
00:18:21.360 it's still going to figure out um in the plan it's  still going to pick the right tools for every step
00:18:27.520 uh as if by magic but here have a look these  are basically the the tools that we have in our
00:18:32.640 cloud we're continuing to add more tools um I'm  not sure how far down that that path we will go
00:18:39.760 given the fact of you know we have MCP rising and  it's just going to become easier to get tools from
00:18:46.000 elsewhere but uh for now we're continuing to add  some of these tools but more importantly have a
00:18:50.960 look at this plan right it is still able to figure  out that it's going to use the file reader tool
00:18:55.840 it is still able to figure out that it's going to  then analyze the news using the LLM tool and then
00:19:01.440 finally it is able to actually pick the right tool  which is a Google email tool to send an email so
00:19:07.280 what happens if you try and run this let's have a  look what is going to happen is you know the first
00:19:15.680 two steps will look similar to what you've seen  before but when it gets when the execution agent
00:19:20.480 that picks up step two sending the email uh starts  like goes to work um it is going to get stuck
00:19:28.560 and why is it going to get stuck well because the  Gmail tool requires an authentication token and so
00:19:35.760 uh this is one of the things that that Portia uh  thrives on which is this human agent interface our
00:19:41.840 execution agents are able to raise what's called  a clarification it's a structured JSON object and
00:19:47.360 hand over control of the uh the the plan run to a  developer and so equipped with that clarification
00:19:54.640 you as a developer should be able to surface  this and any any UX form factor you like any
00:20:01.040 UX surface you like uh for users to uh uh to  to resolve before the plan run can resume and
00:20:09.600 so if we have a look at this plan run now uh you  will see that it exited with need clarification
00:20:17.360 so basically sort of did the plan run here and  it exited and then when we print this plan run
00:20:22.960 it's just um it stopped at need clarification  at step number two and the outputs and the plan
00:20:28.960 run state include the outputs from the previous  steps but it now also includes a clarification
00:20:34.080 raised at step two we have different types of  clarifications some are input clarifications if
00:20:39.600 you're missing information or the person entered  a an invalid or tool argument that isn't allowed
00:20:45.840 we have multiplechoice clarifications you can  imagine something like wanting to approve yes
00:20:51.360 or no a step before it continues um and we have  action clarifications which typically is about
00:20:59.280 clicking on a link and when that link is clicked  on there's a listener of sorts that that realizes
00:21:05.120 the clarification is sorry is a result so we'll  we'll dive into clarifications and how you can
00:21:14.000 customize those for various uh user experiences  in another post um right now because I have not
00:21:21.520 specified anything for how I want to handle  clarifications the planner run just sort of
00:21:25.520 stopped it needs clarification and exited but you  can now see what clarifications look like this is
00:21:31.200 our first foray into the human agent interaction  with Portia so um so how do we get out of this
00:21:39.600 uh this conundrum well the way we get out of this  conundrum is that we introduce clarifications into
00:21:45.440 um uh into this plan run and the way we do that  is again you could you could test the plan run for
00:21:52.800 uh for clarifications get all outstanding  clarifications do a while loop and and resolve
00:21:58.880 them and so on so forth we'll we'll have a look  at how to do that uh under the hood more manually
00:22:05.520 uh later on but for now what I'm going to do is  use the clarification handlers that we've already
00:22:11.280 created in our um in our SDK for um handling  execution like handling uh clarifications in
00:22:19.200 the command line interface so I'm just going to  add that here i'm going to import that here and
00:22:25.520 um and the the other thing that I need to do is  to then make sure that I've added this into the
00:22:33.120 uh the execution hooks that are available to the  Portia client so that it now knows that hey look
00:22:38.480 if you encounter clarifications you can use this  execution hook to handle them uh again we will
00:22:44.240 go into the gory details of how you create those  for other um other user experiences another time
00:22:51.280 but you basically will define your methods for  handling different types of clarifications in this
00:22:58.240 case it's something as simple as like you know  you produce the clarification in the command line
00:23:02.480 interface for someone to click on it so now that  I've added this I'm going to give this plan run
00:23:08.320 another try and what you're going to see happen  at this last step is the user will be prompted per
00:23:15.120 the code that's in the execution hooks uh class  uh to to click on this link and and authenticate
00:23:22.080 and the Portia client will be listening for  the resolution of this uh to to proceed so
00:23:28.480 let's give that another go and see what happens  so planning agent runs again as we saw before and
00:23:42.640 uh once the first two steps are completed we  get to the third one instead of just exiting
00:23:47.680 um the Portia client will use the execution  hook to maintain state uh on the plan run and
00:23:53.920 wait for the resolution of the clarification uh so  let's give that a second um I'll anticipate that
00:24:01.120 question while we're waiting for this thing to  cook um the uh all of our tools the Portia tools
00:24:09.120 uh in the cloud come with built-in authentication  which means that like when there's an action
00:24:13.440 clarification the uh the authentication link you  see comes out of a a Portia authentication app
00:24:20.160 with the relevant provider for example with Google  uh and so obviously the with the redirect URL we
00:24:26.240 will obtain the OOTH token uh which then you know  allows the the Portia client to resume um so here
00:24:35.360 you go now you can see a step output where the  the clarification was produced and now Portia is
00:24:41.840 waiting for uh the per the person to authenticate  and this sort of action clarification this is
00:24:48.560 the method that comes from our CLI execution so  let's just click on this and let's authenticate
00:24:56.560 um conveniently this came out on another  window let me bring that back here we go so
00:25:02.400 uh this is using again our Oh look you can see me  hi uh this is using our authentication client boom
00:25:10.160 um and it is the scope that we that is attached to  this particular uh tool so we're requesting that
00:25:16.160 so you can see how you can control the scope of  your agents using our action clarifications now
00:25:22.240 now that I've authenticated you will notice that  the um good old Portia client is going to receive
00:25:29.200 the OF token put it in our OF token store and you  can see that the plan run state is now updated
00:25:34.480 to in progress um there's a mention of the Portia  AI dashboard for those of you with uh feline eyes
00:25:42.560 but we'll talk we'll see look at that in a second  but um more importantly it was able to resume and
00:25:49.600 u and it was able to execute the uh invoke the  the send email tool and it was able to execute it
00:25:55.920 correctly and I was able to send myself an email  u that summarizes the headline and confirms that
00:26:03.680 that poor old skeleton was not able to complete  um its shower operation um but have a look at this
00:26:10.960 signed by Munir co-founder of Portia AI i don't  know why I'm surprised that the product is working
00:26:16.720 i shouldn't be um but yeah it's pretty cool right  this is because we have the execution um what do
00:26:22.880 you call it sorry the execution context with that  end user specified and it was picked up uh and
00:26:28.400 the email was uh was successfully sent um whilst  the clarification was resolved which is pretty
00:26:36.800 neat right and uh just to sort of uh show you  that so that u you don't think this is smok and
00:26:42.880 mirrors there you go so here's a brief summary of  today's quirky news and uh you've got your sort of
00:26:48.480 predicament of the um skeleton running out of shoo  in a shower so there you have it folks uh this is
00:26:56.480 a this was a walkthrough of the core abstractions  and how it all comes together uh hopefully you
00:27:01.760 were able to code along and hopefully I didn't  ramble too much and it all made sense uh again
00:27:07.280 this is this is actually my second video ever  on on YouTube so I probably did 100 things wrong
00:27:11.680 please do give me feedback um God knows I need it  and and and help me figure out how to make those
00:27:17.520 videos more useful for you and what you'd like  to hear about next um thank you for watching and
00:27:23.120 uh and catch you again soon once again please be  remiss if I don't say uh like and subscribe um
00:27:30.240 and follow the links in the description below to  find our GitHub repo install it um or to navigate
00:27:36.240 to our docs for our examples repo if you wanted  to to try a few more advanced examples so one
